<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:v="https://vecta.io/nano" width="495" height="215"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><style><![CDATA[.H{letter-spacing:-0.013em}.I{letter-spacing:-0.074em}]]></style><defs><style>@font-face{font-family:"ArialNarrow";src:url(data:application/font-woff;charset=utf-8;base64,) format("woff"); font-weight:normal;font-style:normal;}</style><clipPath id="A"><path d="M0 0h495v215H0z"/></clipPath><path id="B" d="M79.111 161.964a7.3 7.3 0 0 1-7.288-7.288V105.36c0-.704.836-1.533 2.212-2.814l1.444-1.393.002-.002.002-.002a36.52 36.52 0 0 0 1.003-1.094c1.342-1.505 1.745-1.857 2.624-1.857 1.965 0 3.802.743 5.173 2.092 1.364 1.342 2.115 3.143 2.115 5.071v49.316a7.3 7.3 0 0 1-7.288 7.288z"/><path id="C" d="M79.667 101.735l-.568.649-1.107 1.205-1.573 1.52-1.097 1.056v48.513c0 2.089 1.699 3.788 3.788 3.788s3.788-1.699 3.788-3.788V105.36c0-1.871-1.38-3.373-3.232-3.625m-.556-7.038c5.958 0 10.788 4.705 10.788 10.663v49.316a10.79 10.79 0 0 1-10.788 10.788 10.79 10.79 0 0 1-10.788-10.788V105.36c0-2.884 2.636-4.572 4.643-6.643 1.801-1.865 3.07-4.02 6.145-4.02z"/></defs><g clip-path="url(#A)"><g fill="#fff"><g stroke="#4d8677"><circle cx="79" cy="78.25" r="14.5" stroke="none"/><circle cx="79" cy="78.25" r="11" fill="none" stroke-width="7"/><circle cx="116" cy="78.25" r="14.5" stroke="none"/><circle cx="116" cy="78.25" r="11" fill="none" stroke-width="7"/><circle cx="152" cy="78.25" r="14.5" stroke="none"/><circle cx="152" cy="78.25" r="11" fill="none" stroke-width="7"/></g><use xlink:href="#B"/><use xlink:href="#C" fill="#4d8677"/><path d="M116.098 161.964a7.3 7.3 0 0 1-7.288-7.288V105.36c0-.704.836-1.533 2.212-2.814l1.444-1.393.002-.002.002-.002a36.52 36.52 0 0 0 1.003-1.094c1.342-1.505 1.745-1.857 2.624-1.857 1.965 0 3.802.743 5.173 2.092 1.364 1.342 2.115 3.143 2.115 5.071v49.316a7.3 7.3 0 0 1-7.288 7.288z"/><path d="M116.654 101.735l-.568.649-1.107 1.205-1.573 1.52-1.097 1.056v48.513c0 2.089 1.699 3.788 3.788 3.788s3.788-1.699 3.788-3.788V105.36c0-1.871-1.38-3.373-3.232-3.625m-.556-7.038c5.958 0 10.788 4.705 10.788 10.663v49.316a10.79 10.79 0 0 1-10.788 10.788 10.79 10.79 0 0 1-10.788-10.788V105.36c0-2.884 2.636-4.572 4.643-6.643 1.801-1.865 3.07-4.02 6.145-4.02z" fill="#4d8677"/><path d="M153.085 161.964a7.3 7.3 0 0 1-7.288-7.288V105.36c0-.704.836-1.533 2.212-2.814l1.444-1.393.002-.002.002-.002a36.52 36.52 0 0 0 1.003-1.094c1.342-1.505 1.745-1.857 2.624-1.857 1.965 0 3.802.743 5.173 2.092 1.364 1.342 2.115 3.143 2.115 5.071v49.316a7.3 7.3 0 0 1-7.288 7.288z"/><path d="M153.641 101.735l-.568.649-1.107 1.205-1.573 1.52-1.097 1.056v48.513c0 2.089 1.699 3.788 3.788 3.788s3.788-1.699 3.788-3.788V105.36c0-1.871-1.38-3.373-3.232-3.625m-.556-7.038c5.958 0 10.788 4.705 10.788 10.663v49.316a10.79 10.79 0 0 1-10.788 10.788 10.79 10.79 0 0 1-10.788-10.788V105.36c0-2.884 2.636-4.572 4.643-6.643 1.801-1.865 3.07-4.02 6.145-4.02z" fill="#4d8677"/><g stroke="#4d8677"><rect width="20" height="73" rx="7" stroke="none" x="37.5" y="92.75"/><rect x="41" y="96.25" width="13" height="66" rx="3.5" fill="none" stroke-width="7"/><path d="M52.5 113.75h128v19h-128z" stroke="none"/><path d="M56 117.25h121v12H56z" fill="none" stroke-width="7"/></g></g><path d="M192 41.25v125" fill="none" stroke="#000" stroke-linecap="round" stroke-width="5"/><text class="H" transform="translate(199.5 99.75)" font-size="75" font-family="ArialNarrow,Arial Narrow"><tspan x="0" y="0">VIRTUAL</tspan><tspan class="I"><tspan y="62" x="0">QUEUING</tspan></tspan></text></g></svg>